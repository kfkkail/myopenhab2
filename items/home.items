//Persistence Groups
Group gMyOpenHAB // for Items that are exposed to IFTTT
Group gChart // for Items to persist for charting
Group gHistory // for Items to preserve their history
//Group gRestore // for Items to restore on startup (currently everything so commented out)

Group nestThermostat "Nest Thermostat"
Group integraBasement "Home Theater"
Group plugDimmers "All Plug Dimmers"
Group devicePresence "Device Presence"
Group:Switch:OR(ON, OFF) dimmers "Dimmers [(%d)]"
Group:Switch:OR(ON, OFF) switches "Switches [(%d)]"
Group:Switch:OR(ON, OFF) motionDetected "Motion? [(%d)]"
Group Lights_Random
Group lightsAtNight // Basically a christmas light controller

Group:Number:AVG IndoorTemperature "Indoor Average Temperature [%.1f °F]" <temperature>
Group:Number:AVG IndoorHumidity "Indoor Average Humidity [%.0f %%]" <water>
/* Nest binding Items */

DateTime Nest_last_connection "Last Nest Connection [%1$tm/%1$td %1$tH:%1$tM]"  {nest="<[last_connection]"}

/* Structures - change Home to your structure's name */

//String   NestHome_name "Name [%s]"                    {nest="<[structures(Home).name]"}
//String   NestHome_country_code "Country Code [%s]"    {nest="<[structures(Home).country_code]"}
//String   NestHome_postal_code "Postal Code [%s]"      {nest="<[structures(Home).postal_code]"}
//String   NestHome_time_zone "Time Zone [%s]"          {nest="<[structures(Home).time_zone]"}
String   NestHome_away "Home/Away [%s]"               <present> (nestThermostat) {nest="=[structures(Home).away]"}
//String   NestHome_structure_id "Structure Id [%s]"    {nest="<[structures(Home).structure_id]"}

/* Thermostats - change to your thermostat's name */

Number   Nest_humidity "House Humidity [%d %%]"                                   <water> (IndoorHumidity) {nest="<[thermostats(Hallway).humidity]"}
//String   Nest_locale "Locale [%s]"                                          {nest="<[thermostats(Hallway).locale]"}
//String   Nest_temperature_scale "Temperature Scale [%s]"                    {nest="<[thermostats(Hallway).temperature_scale]"}
//Switch   Nest_is_using_emergency_heat "Is using emergency heat [%s]"        {nest="<[thermostats(Hallway).is_using_emergency_heat]"}
//Switch   Nest_has_fan "Has Fan [%s]"                                        {nest="<[thermostats(Hallway).has_fan]"}
//String   Nest_software_version "Software Version [%s]"                      {nest="<[thermostats(Hallway).software_version]"}
//Switch   Nest_has_leaf "Has Leaf [%s]"                                      (nestThermostat) {nest="<[thermostats(Hallway).has_leaf]"}
//String   Nest_device_id "Device Id [%s]"                                    {nest="<[thermostats(Hallway).device_id]"}
//String   Nest_name "Name [%s]"                                              {nest="<[thermostats(Hallway).name]"}
Switch   Nest_can_heat "Can Heat [%s]"                                      (nestThermostat) {nest="<[thermostats(Hallway).can_heat]"}
Switch   Nest_can_cool "Can Cool [%s]"                                      (nestThermostat) {nest="<[thermostats(Hallway).can_cool]"}
String   Nest_hvac_mode "HVAC Mode [%s]"                                    <climate> (nestThermostat) {nest="=[thermostats(Hallway).hvac_mode]"}
//Number   Nest_target_temperature_c "Target Temperature [%.1f °C]"           {nest="=[thermostats(Hallway).target_temperature_c]"}
Number   Nest_target_temperature_f "Target Temperature [%.1f °F]"           <temperature> (nestThermostat) {nest="=[thermostats(Hallway).target_temperature_f]"}
//Number   Nest_target_temperature_high_c "Target Temperature High [%.1f °C]" {nest="=[thermostats(Hallway).target_temperature_high_c]"}
Number   Nest_target_temperature_high_f "Target Temperature High [%.1f °F]" (nestThermostat) {nest="=[thermostats(Hallway).target_temperature_high_f]"}
//Number   Nest_target_temperature_low_c "Target Temperature Low [%.1f °C]"   {nest="=[thermostats(Hallway).target_temperature_low_c]"}
Number   Nest_target_temperature_low_f "Target Temperature Low [%.1f °F]"   (nestThermostat) {nest="=[thermostats(Hallway).target_temperature_low_f]"}
//Number   Nest_ambient_temperature_c "House Temperature [%.1f °C]"         {nest="<[thermostats(Hallway).ambient_temperature_c]"}
Number   Nest_ambient_temperature_f "House Temperature [%.1f °F]"         <temperature> (IndoorTemperature) {nest="<[thermostats(Hallway).ambient_temperature_f]"}
//Number   Nest_away_temperature_high_c "Away Temperature High [%.1f °C]"     {nest="<[thermostats(Hallway).away_temperature_high_c]"}
Number   Nest_away_temperature_high_f "Away Temperature High [%.1f °F]"     (nestThermostat) {nest="<[thermostats(Hallway).away_temperature_high_f]"}
//Number   Nest_away_temperature_low_c "Away Temperature Low [%.1f °C]"       {nest="<[thermostats(Hallway).away_temperature_low_c]"}
Number   Nest_away_temperature_low_f "Away Temperature Low [%.1f °F]"       (nestThermostat) {nest="<[thermostats(Hallway).away_temperature_low_f]"}
//String   Nest_structure_id "Structure Id [%s]"                              {nest="<[thermostats(Hallway).structure_id]"}
//Switch   Nest_fan_timer_active "Fan Timer Active [%s]"                      (nestThermostat) {nest="=[thermostats(Hallway).fan_timer_active]"}
//DateTime Nest_fan_timer_timeout "Fan Timer Timeout [%1$tm/%1$td/%1$tY %1$tH:%1$tM:%1$tS]" <calendar> (nestThermostat) {nest="<[thermostats(Hallway).fan_timer_timeout]"}
//String   Nest_name_long "Name Long [%s]"                                    {nest="<[thermostats(Hallway).name_long]"}
//Switch   Nest_is_online "Is Online [%s]"                                    {nest="<[thermostats(Hallway).is_online]"}
//DateTime Nest_last_connection "Last Connection [%1$tm/%1$td/%1$tY %1$tH:%1$tM:%1$tS]" <calendar> (nestThermostat) {nest="<[thermostats(Hallway).last_connection]"}
String   Nest_hvac_state "HVAC State [%s]"                                  <temperature> (nestThermostat) {nest="<[thermostats(Hallway).hvac_state]"}

/* Integra Receiver binding Items */

Switch integraPower           "Integra Receiver Power"      (integraBasement) { channel="onkyo:onkyoAVR:86c0782c:zone1#power" }
//Number integraSleep           "Sleep Timer [%d Min]"      {onkyo="INIT:integrareceiver:#SLPQSTN, 0:integrareceiver:#SLPOFF, *:integrareceiver:#SLP%02X, 0:integrareceiver:#SLPOFF"}
// Switch integraMute            "Mute"                      (integraBasement) {channel=""}
// Dimmer integraVolume          "Volume [%d]"               (integraBasement) {channel=""}
Number integraSource          "Source"                    <video> (integraBasement) {channel="onkyo:onkyoAVR:86c0782c:zone1#input"}
// Number integraListenMode     "Listen Mode"                <video> {channel=""}
// String integraAudio           "Audio [%s]"                <video> (integraBasement) {channel=""}
// String integraVideo           "Video [%s]"                <video> {channel=""}
//Zone 2
// Switch integraZ2Power         "Zone 2 Power"              (integraBasement) {channel=""}
// Switch integraZ2Mute          "Zone 2 Mute"               (integraBasement) {channel=""}
// Dimmer integraZ2Volume        "Zone 2 Volume [%d]"        (integraBasement) {channel=""}
// Number integraZ2Source        "Zone 2 Source"             <video> (integraBasement) {channel=""}
//NET/USB
// String integraNETPlayStatus   "Play Status [%s]"          (integraBasement) {channel=""}
// Switch integraNETPlay         "Play"                      (integraBasement) {channel="", autoupdate="false"}
// Switch integraNETPause        "Pause"                     (integraBasement) {channel="", autoupdate="false"}
// Switch integraNETStop         "Stop"                      (integraBasement) {channel="", autoupdate="false"}
// Number integraNETService      "Service"                   {channel=""}
// Number integraNETList         "Select List Item"          {channel=""}

//Epson Projector
Switch HomeTheaterSwitch "Turn On Home Theater w/ Switch"
Switch epsonPower                          <projector_benq> { epsonprojector="hometheaterprojector:Power:60000" }
//String epsonPowerState                     { epsonprojector="*hometheaterprojector:PowerState:60000" }

/* Scene Controller for Home Theater */

Number Home_Theater_Mode        "Home Theater Mode"
String Home_Theater_Feedback    "Home Theater Feedback [%s]"
Number Home_Theater_State       "Home Theater State"
Number Bar_Speaker_Mode         "Bar Speaker Mode"

Dimmer Living_Room_Lamp_Dimmer "Living Room Lamp [%d %%]" (plugDimmers, dimmers, gMyOpenHAB) {channel="zwave:device:ebcd2d3b:node2:switch_dimmer"}
Dimmer Kitchen_UnderCabinet1_Dimmer "Kitchen Undercabinet 1 [%d %%]" (plugDimmers, dimmers) {channel="zwave:device:ebcd2d3b:node3:switch_dimmer"}
Dimmer Kitchen_UnderCabinet2_Dimmer "Kitchen Undercabinet 2 [%d %%]" (plugDimmers, dimmers) {channel="zwave:device:ebcd2d3b:node7:switch_dimmer"}
Dimmer Living_Room_Balls "Light Balls [%d %%]" (dimmers, gMyOpenHAB) {channel="zwave:device:ebcd2d3b:node23:switch_dimmer"}
Switch GreatRoomSwitch "Great Room Switch" (Lights_Random, gMyOpenHAB, switches) {channel="zwave:device:ebcd2d3b:node18:switch_binary"}
Switch MasterBathFanSwitch "Master Bath Shower Fan" (switches, gMyOpenHAB) {channel="zwave:device:ebcd2d3b:node20:switch_binary"}
Switch MasterBathToiletFanSwitch "Master Bath Toilet Fan" (switches, gMyOpenHAB) {channel="zwave:device:ebcd2d3b:node26:switch_binary"}
Number GreatRoomSwitch_State "Great Room Switch State"
Switch BasementStairsSwitch "Basement Stairs Switch" (gMyOpenHAB, switches) {channel="zwave:device:ebcd2d3b:node5:switch_dimmer"}
Dimmer BasementProjectorSpot "Basement Projector Spot [%d %%]" (dimmers, gMyOpenHAB) {channel="zwave:device:ebcd2d3b:node6:switch_dimmer"}
Dimmer BasementArt "Basement Art Dimmer [%d %%]" (dimmers, gMyOpenHAB) {channel="zwave:device:ebcd2d3b:node19:switch_dimmer"}
//Switch OutdoorModule "Outdoor Module" (lightsAtNight) {channel="22:command=SWITCH_BINARY"} //Add channel information
Switch Dehumidifier "Dehumidifier" (switches) {channel="zwave:device:ebcd2d3b:node24:switch_binary"}
Switch Humidifier "Humidifier" (switches) {channel="zwave:device:ebcd2d3b:node25:switch_binary"}
Switch TriggerTimer "Light Timer Trigger"
Switch Kitchen_UnderCabinet "Kitchen Undercabinet" (gMyOpenHAB)

Switch Doorbell "Doorbell" {channel="zwave:device:ebcd2d3b:node14:notification_power_management"}
Number FrontDoor_Doorbell_Battery "Doorbell Battery [%d %%]" {channel="zwave:device:ebcd2d3b:node14:battery-level"}
Number Doorbell_Battery_Icon			"Doorbell Battery Icon"

/* Use the Astro binding to see when it's dark or light outside. Using a light sensor would be
  even better, but that's not too hard to hack in later */

DateTime Sunrise_Time  "Sunrise [%1$tH:%1$tM]" <sunrise> { channel="astro:sun:home:rise#start" }
DateTime Sunset_Time   "Sunset [%1$tH:%1$tM]" <sunset> { channel="astro:sun:home:set#start" }

/* Device Presence Detection */
String OwnerPresence "Owner Presence" <present> (devicePresence, gMyOpenHAB)
Switch someoneIsHome "Someone Is Home!" <present> (devicePresence)
Switch wifi_Kail "Kail Wifi"      <present> (devicePresence)      {nh="192.168.0.206"}
Switch wifi_Andrea "Andrea Wifi"  <present> (devicePresence)      {nh="192.168.0.207"}

//Enable & Disable Notifications
Switch openhabNotifications "Notifications"
Switch openhabNotificationsAway "Notifications Away"

Number   Temperature_OWM   "Outside Temperature [%.1f °F]"   <temperature> {weather="locationId=home-OWM, type=temperature, property=current, unit=fahrenheit"}
Number   Humidity      "Outside Humidity [%d %%]"        <water> {weather="locationId=home-OWM, type=atmosphere, property=humidity"}

Switch PIRMotionDetection "PIR Motion Detection"

Switch UpstairsPIRLightControl "Upstairs PIR Light Control"
Switch UPSTAIRS_PIR_TAMPER "Motion Tamper [%s]" {channel="zwave:device:ebcd2d3b:node21:alarm_burglar"}
Number UPSTAIRS_PIR_BATTERY "Motion Battery [%d %%]" <battery> {channel="zwave:device:ebcd2d3b:node21:battery-level"}
Number UPSTAIRS_PIR_TEMPERATURE "Upstairs Temperature [%.1f °F]" <temperature> (IndoorTemperature) {channel="zwave:device:ebcd2d3b:node21:sensor_temperature"}
Number UPSTAIRS_PIR_LIGHT "Upstairs Light Level [%.0f %%]" <slider> {channel="zwave:device:ebcd2d3b:node21:sensor_luminance"}
Number UPSTAIRS_PIR_REL_HUMID "Upstairs Humidity [%.0f %%]" <water> (IndoorHumidity) {channel="zwave:device:ebcd2d3b:node21:sensor_relhumidity"}
Switch UPSTAIRS_PIR_MOTION "Upstairs Motion [%s]" <motion> (motionDetected) {channel="zwave:device:ebcd2d3b:node21:sensor_binary"}

Switch GreatRoomPIRLightControl "Great Room PIR Light Control"
Switch GREATROOM_PIR_TAMPER "Motion Tamper [%s]" {channel="zwave:device:ebcd2d3b:node15:alarm_burglar"}
Number GREATROOM_PIR_BATTERY "Motion Battery [%d %%]" <battery> {channel="zwave:device:ebcd2d3b:node15:battery-level"}
Number GREATROOM_PIR_TEMPERATURE "Great Room Temperature [%.1f °F]" <temperature> (IndoorTemperature) {channel="zwave:device:ebcd2d3b:node15:sensor_temperature"}
Number GREATROOM_PIR_LIGHT "Great Room Light Level [%.0f %%]" <slider> {channel="zwave:device:ebcd2d3b:node15:sensor_luminance"}
Number GREATROOM_PIR_REL_HUMID "Great Room Humidity [%.0f %%]" <water> (IndoorHumidity) {channel="zwave:device:ebcd2d3b:node15:sensor_relhumidity"}
Switch GREATROOM_PIR_MOTION "Great Room Motion [%s]" <motion> (motionDetected) {channel="zwave:device:ebcd2d3b:node15:sensor_binary"}

Switch BasementPIRLightControl "Basement PIR Light Control"
Switch BASEMENT_PIR_TAMPER "Motion Tamper [%s]" {channel="zwave:device:ebcd2d3b:node17:alarm_burglar"}
Number BASEMENT_PIR_BATTERY "Motion Battery [%d %%]" <battery> {channel="zwave:device:ebcd2d3b:node17:battery-level"}
Number BASEMENT_PIR_TEMPERATURE "Basement Temperature [%.1f °F]" <temperature> (IndoorTemperature) {channel="zwave:device:ebcd2d3b:node17:sensor_temperature"}
Number BASEMENT_PIR_LIGHT "Basement Light Level [%.0f %%]" <slider> {channel="zwave:device:ebcd2d3b:node17:sensor_luminance"}
Number BASEMENT_PIR_REL_HUMID "Basement Humidity [%.0f %%]" <water> (IndoorHumidity) {channel="zwave:device:ebcd2d3b:node17:sensor_relhumidity"}
Switch BASEMENT_PIR_MOTION "Basement Motion [%s]" <motion> (motionDetected) {channel="zwave:device:ebcd2d3b:node17:sensor_binary"}

Rollershutter GarageDoorShutter "Garage Door" <garagedoor> (gMyOpenHAB) {myq="0"}

//Alarm to set Nest to Home, after being away
Switch  alarmMonday     "Monday"     <switch>
Switch  alarmTuesday   "Tuesday"   <switch>
Switch  alarmWednesday   "Wednesday"   <switch>
Switch  alarmThursday "Thursday" <switch>
Switch  alarmFriday    "Friday"    <switch>
Switch  alarmSaturday    "Saturday"    <switch>
Switch  alarmSunday    "Sunday"    <switch>

String alarmMessage "%s"

Number alarmHour "Hour [%d]" <clock>
Number alarmMinute "Minute [%d]" <clock>

Switch TalkControl "Talk Control"

Contact garageDoorEntry "Garage Door Entry" {channel="zwave:device:ebcd2d3b:node36:sensor_door"}
Number garageDoorEntryBattery "Garage Door Entry Battery" {channel="zwave:device:ebcd2d3b:node36:battery-level"}
Switch garageDoorEntrySwitch "Garage Door Entry" {channel="zwave:device:ebcd2d3b:node36:alarm_access"}
Number garageDoorEntry_state "Garage Door Entry State"
